
ATMEGA128_TrashCan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080013a  0080013a  000004f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001209  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfa  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d8  00000000  00000000  000024f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000509  00000000  00000000  000032e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c1       	rjmp	.+934    	; 0x3ac <__vector_1>
   6:	00 00       	nop
   8:	e7 c1       	rjmp	.+974    	; 0x3d8 <__vector_2>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e2       	ldi	r30, 0x26	; 38
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	aa 33       	cpi	r26, 0x3A	; 58
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	aa e3       	ldi	r26, 0x3A	; 58
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 34       	cpi	r26, 0x42	; 66
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	2f d1       	rcall	.+606    	; 0x32a <main>
  cc:	aa c1       	rjmp	.+852    	; 0x422 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <LCD_command>:
#include "lcd.h"

/* write a command(instruction) to text LCD */
void LCD_command(unsigned char command)		
{
    LCD_CONTROL = 0x00;				// E = 0, Rs = 0
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f1 e2       	ldi	r31, 0x21	; 33
  d4:	10 82       	st	Z, r1
    LCD_DATABUS = command;			// output command
  d6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__bss_end+0x1ebe>
    LCD_CONTROL = 0x01;				// E = 1
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_command+0x10>
  e4:	00 00       	nop
    _delay_us(1);
    LCD_CONTROL = 0x00;				// E = 0
  e6:	10 82       	st	Z, r1
  e8:	87 ec       	ldi	r24, 0xC7	; 199
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_command+0x1c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_command+0x22>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <LCD_data>:
    _delay_us(50);
}
/* display a character on text LCD */
void LCD_data(unsigned char data)		
{
    LCD_CONTROL = 0x02;				// E = 0, Rs = 1
  f6:	e0 e0       	ldi	r30, 0x00	; 0
  f8:	f1 e2       	ldi	r31, 0x21	; 33
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	90 83       	st	Z, r25
    LCD_DATABUS = data;				// output data
  fe:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__bss_end+0x1ebe>
    LCD_CONTROL = 0x03;				// E = 1
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	80 83       	st	Z, r24
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_data+0x12>
 10c:	00 00       	nop
    _delay_us(1);
    LCD_CONTROL = 0x02;				// E = 0
 10e:	90 83       	st	Z, r25
 110:	87 ec       	ldi	r24, 0xC7	; 199
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_data+0x1e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_data+0x24>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <LCD_string>:
    _delay_us(50);
}
/* display a string on LCD */
void LCD_string(unsigned char command, unsigned char *string) 
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	eb 01       	movw	r28, r22
    LCD_command(command);				// start position of string
 124:	d5 df       	rcall	.-86     	; 0xd0 <LCD_command>
    while(*string != '\0')			// display string
    { 
        LCD_data(*string);
 126:	02 c0       	rjmp	.+4      	; 0x12c <LCD_string+0xe>
 128:	e6 df       	rcall	.-52     	; 0xf6 <LCD_data>
        string++;
 12a:	21 96       	adiw	r28, 0x01	; 1
}
/* display a string on LCD */
void LCD_string(unsigned char command, unsigned char *string) 
{
    LCD_command(command);				// start position of string
    while(*string != '\0')			// display string
 12c:	88 81       	ld	r24, Y
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <LCD_string+0xa>
    { 
        LCD_data(*string);
        string++;
    }
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <LCD_initialize>:
/* initialize text LCD module */
void LCD_initialize(void)			
{
    LCD_CONTROL = 0x03;				// E = 1, Rs = 1 (dummy write)
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f1 e2       	ldi	r31, 0x21	; 33
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 83       	st	Z, r24
    LCD_CONTROL = 0x02;				// E = 0, Rs = 1
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9f e1       	ldi	r25, 0x1F	; 31
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_initialize+0x10>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_initialize+0x16>
 14e:	00 00       	nop
    _delay_ms(2);

    LCD_command(0x38);				// function set(8 bit, 2 line, 5x7 dot)
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	be df       	rcall	.-132    	; 0xd0 <LCD_command>
    LCD_command(0x0C);				// display control(display ON, cursor OFF)
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	bc df       	rcall	.-136    	; 0xd0 <LCD_command>
    LCD_command(0x06);				// entry mode set(increment, not shift)
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	ba df       	rcall	.-140    	; 0xd0 <LCD_command>
    LCD_command(0x01);				// clear display
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	b8 df       	rcall	.-144    	; 0xd0 <LCD_command>
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9f e1       	ldi	r25, 0x1F	; 31
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_initialize+0x2c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_initialize+0x32>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <Port_Init>:
    }
}

static void Port_Init(void)
{
    MCUCR = 0x80;					// enable external memory and I/O
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	85 bf       	out	0x35, r24	; 53
    XMCRA = 0x44;					// 0x1100-0x7FFF=1 wait, 0x8000-0xFFFF=0 wait
 172:	94 e4       	ldi	r25, 0x44	; 68
 174:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    XMCRB = 0x80;					// enable bus keeper, use PC0-PC7 as address
 178:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7e0075>

    DDRB = 0xF0;					// 입력/출력 방향결정, PORTB7..4 = output, PORTB3..0 = Input
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;                   // I/O pin 초기값 지정
 180:	15 b8       	out	0x05, r1	; 5

    DDRD = 0x00;					// Port D = Input, “1= Output, 0= Input”
 182:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0x00;
 184:	1b b8       	out	0x0b, r1	; 11

    DDRE = 0x0A;					// Port E1,E3 = output, All other PORTs are Input
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	8d b9       	out	0x0d, r24	; 13
    PORTE = 0x00;
 18a:	1e b8       	out	0x0e, r1	; 14

    DDRF = 0x00;					// Port F = Input
 18c:	10 ba       	out	0x10, r1	; 16
    PORTF = 0x00;
 18e:	11 ba       	out	0x11, r1	; 17

    DDRG = 0x1F;
 190:	8f e1       	ldi	r24, 0x1F	; 31
 192:	83 bb       	out	0x13, r24	; 19
    
    LCD_CONTROL = 0x00;
 194:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x1fbe>
    LCD_DATABUS = 0x00;
 198:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__bss_end+0x1ebe>
 19c:	08 95       	ret

0000019e <Timer1_Init>:
}

static void Timer1_Init(void)
{
    TCCR1A = 0x00; // Normal Port Operation
 19e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0x02; // CLK/8(16MHz/8) = 2MHz(T=0.5us)
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1C = 0x00; // Do not use "force output compare"
 1a8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    
    TCNT1H = 0x00; // Upper Byte of Timer/Counter 1
 1ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    TCNT1L = 0x00; // Lower Byte of Timer/Counter 1 
 1b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    EICRA = 0x0A; // INT0, INT1: falling edge trigger
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EICRB = 0x88; // falling edge trigger 
 1ba:	88 e8       	ldi	r24, 0x88	; 136
 1bc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    sei();
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <Timer3_Init>:
}

static void Timer3_Init(void)
{
	TCCR3A=0x82;
 1c4:	82 e8       	ldi	r24, 0x82	; 130
 1c6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B=0x1b;
 1ca:	8b e1       	ldi	r24, 0x1B	; 27
 1cc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	ICR3 =4999; //TOP
 1d0:	87 e8       	ldi	r24, 0x87	; 135
 1d2:	93 e1       	ldi	r25, 0x13	; 19
 1d4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 1d8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 1dc:	08 95       	ret

000001de <ServoControl>:
    return range;
}

static void ServoControl(char control)
{
    switch(control)
 1de:	88 23       	and	r24, r24
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <ServoControl+0xa>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	41 f0       	breq	.+16     	; 0x1f6 <ServoControl+0x18>
 1e6:	08 95       	ret
    {
        case SERVO_CLOSE : 
            OCR3A = 125;
 1e8:	8d e7       	ldi	r24, 0x7D	; 125
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1f0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        break;
 1f4:	08 95       	ret
        case SERVO_OPEN : 
            OCR3A = 625; //180도
 1f6:	81 e7       	ldi	r24, 0x71	; 113
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1fe:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 202:	08 95       	ret

00000204 <UltraSonic>:
}

static int UltraSonic(char ch) 
{ 
    int range = 0;
    switch(ch) 
 204:	88 23       	and	r24, r24
 206:	21 f0       	breq	.+8      	; 0x210 <UltraSonic+0xc>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	09 f4       	brne	.+2      	; 0x20e <UltraSonic+0xa>
 20c:	46 c0       	rjmp	.+140    	; 0x29a <UltraSonic+0x96>
 20e:	8a c0       	rjmp	.+276    	; 0x324 <UltraSonic+0x120>
    { //triggering Ultrasonic Sensor
        case ULTRA_SONIC_CH1 : 
            PORTE |= 0x10; // PE4, output Trig Pulse 
 210:	8e b1       	in	r24, 0x0e	; 14
 212:	80 61       	ori	r24, 0x10	; 16
 214:	8e b9       	out	0x0e, r24	; 14
            EIMSK |= 0x01; // Enable the INT0 
 216:	8d b3       	in	r24, 0x1d	; 29
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	8d bb       	out	0x1d, r24	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	20 e4       	ldi	r18, 0x40	; 64
 21e:	2a 95       	dec	r18
 220:	f1 f7       	brne	.-4      	; 0x21e <UltraSonic+0x1a>
            _delay_us(12);
            PORTE &= ~0x10; // off PE4 of the PORTE 
 222:	8e b1       	in	r24, 0x0e	; 14
 224:	8f 7e       	andi	r24, 0xEF	; 239
 226:	8e b9       	out	0x0e, r24	; 14
            TCNT1 = 0; // Counter1 is cleared
 228:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 22c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            EIFR = 0x00; // Clear interrupt Flag Reg.    
 230:	1c ba       	out	0x1c, r1	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	90 e7       	ldi	r25, 0x70	; 112
 236:	22 e0       	ldi	r18, 0x02	; 2
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	20 40       	sbci	r18, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <UltraSonic+0x34>
 240:	00 c0       	rjmp	.+0      	; 0x242 <UltraSonic+0x3e>
 242:	00 00       	nop
            _delay_ms(50);
            EIMSK = 0x00; //Disable the all INTx
 244:	1d ba       	out	0x1d, r1	; 29

            if(Echo_count[ULTRA_SONIC_CH1] < 232 ) 
 246:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Echo_count>
 24a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Echo_count+0x1>
 24e:	88 3e       	cpi	r24, 0xE8	; 232
 250:	91 05       	cpc	r25, r1
 252:	30 f4       	brcc	.+12     	; 0x260 <UltraSonic+0x5c>
            {
                Echo_count[ULTRA_SONIC_CH1] = 232; //2cm, 116us
 254:	88 ee       	ldi	r24, 0xE8	; 232
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Echo_count+0x1>
 25c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Echo_count>
            }
            if(Echo_count[ULTRA_SONIC_CH1] > 46400 ) 
 260:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Echo_count>
 264:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Echo_count+0x1>
 268:	81 34       	cpi	r24, 0x41	; 65
 26a:	95 4b       	sbci	r25, 0xB5	; 181
 26c:	30 f0       	brcs	.+12     	; 0x27a <UltraSonic+0x76>
            {
                Echo_count[ULTRA_SONIC_CH1] = 46400; //400cm, 23.2ms
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	95 eb       	ldi	r25, 0xB5	; 181
 272:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Echo_count+0x1>
 276:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Echo_count>
            }

            range = Echo_count[ULTRA_SONIC_CH1] / 116;
 27a:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <Echo_count>
 27e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <Echo_count+0x1>
 282:	af e9       	ldi	r26, 0x9F	; 159
 284:	b6 e4       	ldi	r27, 0x46	; 70
 286:	be d0       	rcall	.+380    	; 0x404 <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	92 95       	swap	r25
 28e:	82 95       	swap	r24
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	89 27       	eor	r24, r25
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 27       	eor	r24, r25
        break;
 298:	08 95       	ret
        case ULTRA_SONIC_CH2 : 
            PORTE |= 0x20; // PE5, output Trig Pulse  
 29a:	8e b1       	in	r24, 0x0e	; 14
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	8e b9       	out	0x0e, r24	; 14
            EIMSK |= 0x02; // Enable the INT1
 2a0:	8d b3       	in	r24, 0x1d	; 29
 2a2:	82 60       	ori	r24, 0x02	; 2
 2a4:	8d bb       	out	0x1d, r24	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	80 e4       	ldi	r24, 0x40	; 64
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <UltraSonic+0xa4>
            _delay_us(12);
            PORTE &= ~0x20; // off PE5 of the PORTE
 2ac:	8e b1       	in	r24, 0x0e	; 14
 2ae:	8f 7d       	andi	r24, 0xDF	; 223
 2b0:	8e b9       	out	0x0e, r24	; 14
            TCNT1 = 0; // Counter1 is cleared
 2b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            EIFR = 0x00; // Clear interrupt Flag Reg.    
 2ba:	1c ba       	out	0x1c, r1	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	20 e7       	ldi	r18, 0x70	; 112
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <UltraSonic+0xbe>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <UltraSonic+0xc8>
 2cc:	00 00       	nop
            _delay_ms(50);
            EIMSK = 0x00; //Disable the all INTx
 2ce:	1d ba       	out	0x1d, r1	; 29

            if(Echo_count[ULTRA_SONIC_CH2] < 232 ) 
 2d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Echo_count+0x2>
 2d4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Echo_count+0x3>
 2d8:	88 3e       	cpi	r24, 0xE8	; 232
 2da:	91 05       	cpc	r25, r1
 2dc:	30 f4       	brcc	.+12     	; 0x2ea <UltraSonic+0xe6>
            {
                Echo_count[ULTRA_SONIC_CH2] = 232; //1.6cm, 90us
 2de:	88 ee       	ldi	r24, 0xE8	; 232
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <Echo_count+0x3>
 2e6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Echo_count+0x2>
            }
            if(Echo_count[ULTRA_SONIC_CH2] > 46400 ) 
 2ea:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Echo_count+0x2>
 2ee:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Echo_count+0x3>
 2f2:	81 34       	cpi	r24, 0x41	; 65
 2f4:	95 4b       	sbci	r25, 0xB5	; 181
 2f6:	30 f0       	brcs	.+12     	; 0x304 <UltraSonic+0x100>
            {
                Echo_count[ULTRA_SONIC_CH2] = 46400; //160cm, 18ms
 2f8:	80 e4       	ldi	r24, 0x40	; 64
 2fa:	95 eb       	ldi	r25, 0xB5	; 181
 2fc:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <Echo_count+0x3>
 300:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Echo_count+0x2>
            }

            range = Echo_count[ULTRA_SONIC_CH2] / 116;
 304:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <Echo_count+0x2>
 308:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <Echo_count+0x3>
 30c:	af e9       	ldi	r26, 0x9F	; 159
 30e:	b6 e4       	ldi	r27, 0x46	; 70
 310:	79 d0       	rcall	.+242    	; 0x404 <__umulhisi3>
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	92 95       	swap	r25
 318:	82 95       	swap	r24
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	89 27       	eor	r24, r25
 31e:	9f 70       	andi	r25, 0x0F	; 15
 320:	89 27       	eor	r24, r25
        break; 
 322:	08 95       	ret
    Echo_count[1] = TCNT1; //PD0
}

static int UltraSonic(char ch) 
{ 
    int range = 0;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
        default : 
        break;
    }
    
    return range;
}
 328:	08 95       	ret

0000032a <main>:
#define SERVO_CLOSE         0
#define SERVO_OPEN          1

int main(void)
{
    Port_Init();
 32a:	21 df       	rcall	.-446    	; 0x16e <Port_Init>
    LCD_initialize();
 32c:	05 df       	rcall	.-502    	; 0x138 <LCD_initialize>
 32e:	60 e0       	ldi	r22, 0x00	; 0
    /* Replace with your application code */
    LCD_string(0x80,"Smart Trash Can");
 330:	71 e0       	ldi	r23, 0x01	; 1
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	f4 de       	rcall	.-536    	; 0x11e <LCD_string>
 336:	60 e1       	ldi	r22, 0x10	; 16
    LCD_string(0xC0,"Initializing");
 338:	71 e0       	ldi	r23, 0x01	; 1
 33a:	80 ec       	ldi	r24, 0xC0	; 192
    Timer1_Init();
 33c:	f0 de       	rcall	.-544    	; 0x11e <LCD_string>
 33e:	2f df       	rcall	.-418    	; 0x19e <Timer1_Init>
    Timer3_Init();
 340:	41 df       	rcall	.-382    	; 0x1c4 <Timer3_Init>
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	83 ec       	ldi	r24, 0xC3	; 195
 346:	99 e0       	ldi	r25, 0x09	; 9
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x1e>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x28>
 352:	00 00       	nop
    _delay_ms(200);
    while (1) 
    {
        Distance[ULTRA_SONIC_CH1] = UltraSonic(ULTRA_SONIC_CH1);        
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	56 df       	rcall	.-340    	; 0x204 <UltraSonic>
 358:	ca e3       	ldi	r28, 0x3A	; 58
 35a:	d1 e0       	ldi	r29, 0x01	; 1
 35c:	99 83       	std	Y+1, r25	; 0x01
 35e:	88 83       	st	Y, r24
        Distance[ULTRA_SONIC_CH2] = UltraSonic(ULTRA_SONIC_CH2);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	50 df       	rcall	.-352    	; 0x204 <UltraSonic>
 364:	9b 83       	std	Y+3, r25	; 0x03
 366:	8a 83       	std	Y+2, r24	; 0x02

        if(Distance[ULTRA_SONIC_CH1] < 30)
 368:	88 81       	ld	r24, Y
 36a:	99 81       	ldd	r25, Y+1	; 0x01
 36c:	4e 97       	sbiw	r24, 0x1e	; 30
        {
            ServoControl(SERVO_OPEN);
 36e:	18 f4       	brcc	.+6      	; 0x376 <main+0x4c>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	35 df       	rcall	.-406    	; 0x1de <ServoControl>
 374:	02 c0       	rjmp	.+4      	; 0x37a <main+0x50>
        }
        else
        {
            ServoControl(SERVO_CLOSE);            
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	32 df       	rcall	.-412    	; 0x1de <ServoControl>
        }

        if(Distance[ULTRA_SONIC_CH2] < 30)
 37a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end+0x2>
 37e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x3>
 382:	4e 97       	sbiw	r24, 0x1e	; 30
        {
            LCD_string(0xC0,"Status : Full");
 384:	28 f4       	brcc	.+10     	; 0x390 <main+0x66>
 386:	6d e1       	ldi	r22, 0x1D	; 29
 388:	71 e0       	ldi	r23, 0x01	; 1
 38a:	80 ec       	ldi	r24, 0xC0	; 192
 38c:	c8 de       	rcall	.-624    	; 0x11e <LCD_string>
 38e:	04 c0       	rjmp	.+8      	; 0x398 <main+0x6e>
        }
        else
        {
            LCD_string(0xC0,"Status : Empty");            
 390:	6b e2       	ldi	r22, 0x2B	; 43
 392:	71 e0       	ldi	r23, 0x01	; 1
 394:	80 ec       	ldi	r24, 0xC0	; 192
 396:	c3 de       	rcall	.-634    	; 0x11e <LCD_string>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	81 ee       	ldi	r24, 0xE1	; 225
 39c:	94 e0       	ldi	r25, 0x04	; 4
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x74>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x7e>
 3a8:	00 00       	nop
 3aa:	d4 cf       	rjmp	.-88     	; 0x354 <main+0x2a>

000003ac <__vector_1>:
 3ac:	1f 92       	push	r1
	TCCR3B=0x1b;
	ICR3 =4999; //TOP
}

ISR(INT0_vect) 
{
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
    Echo_count[0] = TCNT1; //PD0
 3ba:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3be:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3c2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Echo_count+0x1>
 3c6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Echo_count>
}
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_2>:

ISR(INT1_vect) 
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
    Echo_count[1] = TCNT1; //PD0
 3e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3ee:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <Echo_count+0x3>
 3f2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Echo_count+0x2>
}
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__umulhisi3>:
 404:	a2 9f       	mul	r26, r18
 406:	b0 01       	movw	r22, r0
 408:	b3 9f       	mul	r27, r19
 40a:	c0 01       	movw	r24, r0
 40c:	a3 9f       	mul	r26, r19
 40e:	70 0d       	add	r23, r0
 410:	81 1d       	adc	r24, r1
 412:	11 24       	eor	r1, r1
 414:	91 1d       	adc	r25, r1
 416:	b2 9f       	mul	r27, r18
 418:	70 0d       	add	r23, r0
 41a:	81 1d       	adc	r24, r1
 41c:	11 24       	eor	r1, r1
 41e:	91 1d       	adc	r25, r1
 420:	08 95       	ret

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
