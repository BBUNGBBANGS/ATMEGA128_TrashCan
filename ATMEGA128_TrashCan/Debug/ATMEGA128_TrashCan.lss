
ATMEGA128_TrashCan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc4  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b8c  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045d  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000580  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ec  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	41 d0       	rcall	.+130    	; 0x124 <main>
  a2:	43 c0       	rjmp	.+134    	; 0x12a <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <LCD_command>:
    while(*string != '\0')			// display string
    { 
        LCD_data(*string);
        string++;
    }
}
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e2       	ldi	r31, 0x21	; 33
  aa:	10 82       	st	Z, r1
  ac:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_end+0x1f00>
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 83       	st	Z, r24
  b4:	0f 92       	push	r0
  b6:	0f 90       	pop	r0
  b8:	10 82       	st	Z, r1
  ba:	87 ec       	ldi	r24, 0xC7	; 199
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_command+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_command+0x1e>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <LCD_initialize>:
/* initialize text LCD module */
void LCD_initialize(void)			
{
    LCD_CONTROL = 0x03;				// E = 1, Rs = 1 (dummy write)
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f1 e2       	ldi	r31, 0x21	; 33
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	80 83       	st	Z, r24
    LCD_CONTROL = 0x02;				// E = 0, Rs = 1
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9f e1       	ldi	r25, 0x1F	; 31
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_initialize+0x10>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_initialize+0x16>
  de:	00 00       	nop
    _delay_ms(2);

    LCD_command(0x38);				// function set(8 bit, 2 line, 5x7 dot)
  e0:	88 e3       	ldi	r24, 0x38	; 56
  e2:	e1 df       	rcall	.-62     	; 0xa6 <LCD_command>
    LCD_command(0x0C);				// display control(display ON, cursor OFF)
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	df df       	rcall	.-66     	; 0xa6 <LCD_command>
    LCD_command(0x06);				// entry mode set(increment, not shift)
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	dd df       	rcall	.-70     	; 0xa6 <LCD_command>
    LCD_command(0x01);				// clear display
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	db df       	rcall	.-74     	; 0xa6 <LCD_command>
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	9f e1       	ldi	r25, 0x1F	; 31
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_initialize+0x2c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_initialize+0x32>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <Port_Init>:
  fe:	80 e8       	ldi	r24, 0x80	; 128
    }
}

static void Port_Init(void)
{
    MCUCR = 0x80;					// enable external memory and I/O
 100:	85 bf       	out	0x35, r24	; 53
    XMCRA = 0x44;					// 0x1100-0x7FFF=1 wait, 0x8000-0xFFFF=0 wait
 102:	94 e4       	ldi	r25, 0x44	; 68
 104:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    XMCRB = 0x80;					// enable bus keeper, use PC0-PC7 as address
 108:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7e0075>

    DDRB = 0xFF;					// PORTB = output (D/A, LED1-4, matrix LED)
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 110:	15 b8       	out	0x05, r1	; 5
    DDRD = 0xFF;					// PORTD = output (matrix LED)
 112:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x00;
 114:	1b b8       	out	0x0b, r1	; 11
    DDRE = 0x0C;					// PORTE = output for PE3, PE2
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	8d b9       	out	0x0d, r24	; 13
    PORTE = 0x00;
 11a:	1e b8       	out	0x0e, r1	; 14
    DDRF = 0x00;					// PORTF = input (KEY1-4)
 11c:	10 ba       	out	0x10, r1	; 16

    DIG_SELECT = 0x00;				// clear 7-segment LED
 11e:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <_end+0x2100>
 122:	08 95       	ret

00000124 <main>:

static void Port_Init(void);

int main(void)
{
    Port_Init();
 124:	ec df       	rcall	.-40     	; 0xfe <Port_Init>
    LCD_initialize();
 126:	d0 df       	rcall	.-96     	; 0xc8 <LCD_initialize>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x4>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
